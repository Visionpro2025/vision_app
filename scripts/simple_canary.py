#!/usr/bin/env python3
"""
Canary simplificado para VISION PREMIUM.
Verifica que el sistema cumple la pol√≠tica global sin dependencias complejas.
"""

import json
import sys
import os
from pathlib import Path

def test_policy_file():
    """Verifica que existe y es v√°lida la pol√≠tica global"""
    print("üîç Verificando pol√≠tica global...")
    
    policy_path = Path("plans/policy_app.yaml")
    if not policy_path.exists():
        print("‚ùå FALLO: Archivo de pol√≠tica no encontrado")
        return False
    
    try:
        import yaml
        with open(policy_path, 'r', encoding='utf-8') as f:
            policy = yaml.safe_load(f)
        
        # Verificar configuraci√≥n requerida
        app_config = policy.get("app", {})
        if app_config.get("orchestrator") != "cursor_only":
            print("‚ùå FALLO: Orquestador no es 'cursor_only'")
            return False
        
        if app_config.get("allow_simulation") != False:
            print("‚ùå FALLO: allow_simulation no es False")
            return False
        
        if app_config.get("require_sources") != True:
            print("‚ùå FALLO: require_sources no es True")
            return False
        
        if app_config.get("abort_on_empty") != True:
            print("‚ùå FALLO: abort_on_empty no es True")
            return False
        
        print("‚úÖ Pol√≠tica global v√°lida")
        return True
        
    except Exception as e:
        print(f"‚ùå FALLO: Error cargando pol√≠tica: {e}")
        return False

def test_sentinel_step():
    """Verifica que existe el step sentinela"""
    print("üîç Verificando step sentinela...")
    
    sentinel_path = Path("app_vision/steps/step0_enforce_orchestrator.py")
    if not sentinel_path.exists():
        print("‚ùå FALLO: Step sentinela no encontrado")
        return False
    
    # Verificar que contiene la clase correcta
    content = sentinel_path.read_text(encoding='utf-8')
    if "EnforceOrchestratorStep" not in content:
        print("‚ùå FALLO: Clase EnforceOrchestratorStep no encontrada")
        return False
    
    if "cursor_only" not in content:
        print("‚ùå FALLO: Validaci√≥n cursor_only no encontrada")
        return False
    
    print("‚úÖ Step sentinela v√°lido")
    return True

def test_guardrails():
    """Verifica que existen los guardrails"""
    print("üîç Verificando guardrails...")
    
    guardrails_path = Path("app_vision/modules/guardrails.py")
    if not guardrails_path.exists():
        print("‚ùå FALLO: Guardrails no encontrados")
        return False
    
    # Verificar funciones principales
    content = guardrails_path.read_text(encoding='utf-8')
    required_functions = [
        "require_keys", "forbid_sim_source", "assert_nonempty_list",
        "assert_allowlisted", "apply_basic_guardrails"
    ]
    
    for func in required_functions:
        if func not in content:
            print(f"‚ùå FALLO: Funci√≥n {func} no encontrada")
            return False
    
    print("‚úÖ Guardrails v√°lidos")
    return True

def test_audit_step():
    """Verifica que existe el step de auditor√≠a"""
    print("üîç Verificando step de auditor√≠a...")
    
    audit_path = Path("app_vision/steps/stepZ_audit_emit.py")
    if not audit_path.exists():
        print("‚ùå FALLO: Step de auditor√≠a no encontrado")
        return False
    
    content = audit_path.read_text(encoding='utf-8')
    if "AuditEmitStep" not in content:
        print("‚ùå FALLO: Clase AuditEmitStep no encontrada")
        return False
    
    print("‚úÖ Step de auditor√≠a v√°lido")
    return True

def test_app_integration():
    """Verifica que la app principal integra la orquestaci√≥n"""
    print("üîç Verificando integraci√≥n en app principal...")
    
    app_path = Path("app.py")
    if not app_path.exists():
        print("‚ùå FALLO: App principal no encontrada")
        return False
    
    content = app_path.read_text(encoding='utf-8')
    
    # Verificar que contiene enforcement de pol√≠tica
    if "enforce_global_policy" not in content:
        print("‚ùå FALLO: Funci√≥n enforce_global_policy no encontrada")
        return False
    
    if "cursor_only" not in content:
        print("‚ùå FALLO: Validaci√≥n cursor_only no encontrada en app")
        return False
    
    print("‚úÖ App principal integrada correctamente")
    return True

def test_template_plan():
    """Verifica que existe la plantilla de plan"""
    print("üîç Verificando plantilla de plan...")
    
    template_path = Path("plans/template_with_enforcement.json")
    if not template_path.exists():
        print("‚ùå FALLO: Plantilla de plan no encontrada")
        return False
    
    try:
        with open(template_path, 'r', encoding='utf-8') as f:
            template = json.load(f)
        
        # Verificar que contiene step0_enforce
        steps = template.get("steps", [])
        enforce_step = None
        for step in steps:
            if step.get("name") == "step0_enforce":
                enforce_step = step
                break
        
        if not enforce_step:
            print("‚ùå FALLO: step0_enforce no encontrado en plantilla")
            return False
        
        if enforce_step.get("class") != "EnforceOrchestratorStep":
            print("‚ùå FALLO: Clase incorrecta en step0_enforce")
            return False
        
        print("‚úÖ Plantilla de plan v√°lida")
        return True
        
    except Exception as e:
        print(f"‚ùå FALLO: Error cargando plantilla: {e}")
        return False

def main():
    """Funci√≥n principal del canary simplificado"""
    print("üê§ CANARY SIMPLIFICADO - VISION PREMIUM")
    print("=" * 50)
    
    tests = [
        test_policy_file,
        test_sentinel_step,
        test_guardrails,
        test_audit_step,
        test_app_integration,
        test_template_plan
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            if test():
                passed += 1
        except Exception as e:
            print(f"‚ùå ERROR en {test.__name__}: {e}")
    
    print("\n" + "=" * 50)
    print(f"üìä RESULTADO: {passed}/{total} verificaciones pasaron")
    
    if passed == total:
        print("üéâ CANARY SIMPLIFICADO SUPERADO")
        print("‚úÖ Sistema cumple pol√≠tica global de orquestaci√≥n")
        return 0
    else:
        print("‚ùå CANARY SIMPLIFICADO FALL√ì")
        print("‚ö†Ô∏è  Sistema no cumple pol√≠tica global de orquestaci√≥n")
        return 1

if __name__ == "__main__":
    sys.exit(main())


