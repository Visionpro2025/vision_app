import requests

def _sync_library():
    src_path = ROOT / "__LIBRARY" / "sources.csv"
    df = _load_csv_safe(src_path)
    if df is None or df.empty:
        st.error("No hay sources.csv con fuentes.")
        return

    CORPUS.mkdir(parents=True, exist_ok=True)
    for _, row in df.iterrows():
        t = (row.get("type") or "").lower()
        url = str(row.get("url") or "")
        code = str(row.get("default_code") or "READONLY")
        try:
            if t == "file" and url:
                r = requests.get(url, timeout=20)
                r.raise_for_status()
                # nombre simple
                name = url.split("/")[-1] or "descarga.bin"
                out = CORPUS / name
                out.write_bytes(r.content)
                st.success(f"Descargado: {name}")
                # opcional: registra permiso por defecto
                _append_permission_if_missing(f"__LIBRARY/{name}", code)
            elif t == "rss" and url:
                # aquÃ­ podrÃ­as parsear RSS para encontrar PDFs/links y descargarlos
                st.info(f"(demo) RSS detectado: {url} â€” pendiente parseo real")
        except Exception as e:
            st.error(f"Fallo con {url}: {e}")

def _append_permission_if_missing(file_rel: str, code: str):
    perm = ROOT / "__LIBRARY" / "permissions.csv"
    perm.parent.mkdir(parents=True, exist_ok=True)
    if not perm.exists():
        perm.write_text("doc_id,file_path,owner,allowed_codes,notes\n", encoding="utf-8")
    dfp = _load_csv_safe(perm)
    if dfp is None:
        return
    if (dfp["file_path"] == file_rel).any():
        return
    new_id = f"L-{len(dfp)+1:03d}"
    with perm.open("a", encoding="utf-8") as f:
        f.write(f"{new_id},{file_rel},library,{code},auto\n")

# BotÃ³n en la UI
st.write("---")
if st.button("ðŸ”„ Sincronizar biblioteca (descargar fuentes)"):
    _sync_library()  
