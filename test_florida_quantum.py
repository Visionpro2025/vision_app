# ============================================
# üìå TEST: PROTOCOLO CU√ÅNTICO FLORIDA QUINIELA PICK 3
# Prueba limpia del protocolo cu√°ntico completo
# ============================================

import sys
import os
import json
from datetime import datetime

# A√±adir el directorio de la app al path
sys.path.append(os.path.join(os.path.dirname(__file__), 'app_vision'))

def test_florida_quantum_protocol():
    print("üöÄ PRUEBA: PROTOCOLO CU√ÅNTICO FLORIDA QUINIELA PICK 3")
    print("=" * 60)
    print(f"Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    try:
        # Importar m√≥dulos cu√°nticos
        from app_vision.modules.quantum_engine import QuantumEngine
        from app_vision.modules.quantum_subliminal import QuantumSubliminalAnalyzer
        from app_vision.modules.quantum_candado import QuantumCandadoGenerator
        from app_vision.modules.quantum_verification import QuantumContentVerifier
        from app_vision.modules.quantum_news import QuantumNewsAnalyzer
        
        print("‚úÖ M√≥dulos cu√°nticos importados correctamente")
        
        # Crear instancias de los motores cu√°nticos
        quantum_engine = QuantumEngine()
        quantum_subliminal = QuantumSubliminalAnalyzer()
        quantum_candado = QuantumCandadoGenerator()
        quantum_verification = QuantumContentVerifier()
        quantum_news = QuantumNewsAnalyzer()
        
        print("‚úÖ Motores cu√°nticos inicializados")
        print()
        
        # Datos de prueba para Florida Quiniela Pick 3
        print("üìä DATOS DE PRUEBA - FLORIDA QUINIELA PICK 3")
        print("-" * 40)
        
        # N√∫meros del sorteo (ejemplo real)
        p3_mid = "698"    # Pick 3 Midday
        p4_mid = "5184"   # Pick 4 Midday
        p3_eve = "607"    # Pick 3 Evening
        p4_eve = "1670"   # Pick 4 Evening
        
        print(f"Pick 3 Midday: {p3_mid}")
        print(f"Pick 4 Midday: {p4_mid}")
        print(f"Pick 3 Evening: {p3_eve}")
        print(f"Pick 4 Evening: {p4_eve}")
        print()
        
        # Test 1: An√°lisis Cu√°ntico Subliminal
        print("1Ô∏è‚É£ AN√ÅLISIS CU√ÅNTICO SUBLIMINAL")
        print("-" * 40)
        
        draw_numbers = [6, 9, 8, 5, 1, 8, 4, 6, 0, 7, 1, 6, 7, 0]
        context = {
            "temporal_context": 1.0,
            "geographic_context": 1.0,
            "temporal_phase": 0.0,
            "geographic_phase": 0.0
        }
        
        subliminal_result = quantum_subliminal.analyze_quantum_subliminal(draw_numbers, context)
        
        print(f"‚úÖ An√°lisis cu√°ntico subliminal completado")
        print(f"   T√≥picos cu√°nticos: {subliminal_result.quantum_topics}")
        print(f"   Keywords cu√°nticas: {subliminal_result.quantum_keywords}")
        print(f"   Familias cu√°nticas: {subliminal_result.quantum_families}")
        print(f"   Coherencia cu√°ntica: {subliminal_result.quantum_coherence:.3f}")
        print(f"   Fuerza de entrelazamiento: {subliminal_result.quantum_entanglement_strength:.3f}")
        print()
        
        # Test 2: Generaci√≥n Cu√°ntica de Candado
        print("2Ô∏è‚É£ GENERACI√ìN CU√ÅNTICA DE CANDADO")
        print("-" * 40)
        
        cfg = {
            "usar_p4_como_corrido_bloque": True,
            "parles_ordenados": False,
            "activar_empuje": True,
            "activar_reversa": True,
            "equivalencia_cero_100": True
        }
        
        candado_result = quantum_candado.generate_quantum_candado(p3_mid, p4_mid, p3_eve, p4_eve, cfg)
        
        print(f"‚úÖ Generaci√≥n cu√°ntica de candado completada")
        print(f"   Candado MID cu√°ntico: {candado_result.quantum_candado_mid}")
        print(f"   Candado EVE cu√°ntico: {candado_result.quantum_candado_eve}")
        print(f"   Parl√©s MID cu√°nticos: {candado_result.quantum_parles_mid}")
        print(f"   Parl√©s EVE cu√°nticos: {candado_result.quantum_parles_eve}")
        print(f"   Conjunto 2D MID: {candado_result.quantum_conjunto_2d_mid}")
        print(f"   Conjunto 2D EVE: {candado_result.quantum_conjunto_2d_eve}")
        print(f"   Coherencia MID: {candado_result.quantum_coherence_scores['mid_coherence']:.3f}")
        print(f"   Coherencia EVE: {candado_result.quantum_coherence_scores['eve_coherence']:.3f}")
        print(f"   Coherencia total: {candado_result.quantum_coherence_scores['total_coherence']:.3f}")
        print()
        
        # Test 3: Verificaci√≥n Cu√°ntica de Contenido
        print("3Ô∏è‚É£ VERIFICACI√ìN CU√ÅNTICA DE CONTENIDO")
        print("-" * 40)
        
        # Art√≠culos de prueba
        test_articles = [
            {
                "title": "Florida Community Rallies for Housing Support",
                "text": "Local residents in Miami organized a peaceful demonstration to demand better housing policies. The event was attended by over 200 people from various neighborhoods.",
                "date_iso": "2025-09-07",
                "final_url": "https://www.bbc.com/news/florida-housing",
                "content_sha256": "a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0e1f2",
                "domain": "bbc.com"
            },
            {
                "title": "Miami Families Struggle with Rising Housing Costs",
                "text": "The housing crisis in Miami continues to affect local families. Community organizations are working to provide support and resources.",
                "date_iso": "2025-09-06",
                "final_url": "https://www.reuters.com/business/miami-housing",
                "content_sha256": "c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0e1f2g3h4",
                "domain": "reuters.com"
            }
        ]
        
        verification_result = quantum_verification.verify_quantum_content(test_articles)
        
        print(f"‚úÖ Verificaci√≥n cu√°ntica de contenido completada")
        print(f"   Art√≠culos leg√≠timos: {len(verification_result.quantum_legitimate_articles)}")
        print(f"   Art√≠culos ileg√≠timos: {len(verification_result.quantum_illegitimate_articles)}")
        print(f"   Detecci√≥n de IA promedio: {verification_result.quantum_ai_detection['avg_ai_detection_score']:.3f}")
        print(f"   Detecci√≥n de fabricaci√≥n promedio: {verification_result.quantum_fabrication_detection['avg_fabrication_detection_score']:.3f}")
        print(f"   Coherencia temporal promedio: {verification_result.quantum_temporal_coherence['avg_temporal_coherence']:.3f}")
        print()
        
        # Test 4: An√°lisis Cu√°ntico de Noticias
        print("4Ô∏è‚É£ AN√ÅLISIS CU√ÅNTICO DE NOTICIAS")
        print("-" * 40)
        
        subliminal_guidance = {
            "topics": subliminal_result.quantum_topics,
            "keywords_used": subliminal_result.quantum_keywords,
            "families_used": subliminal_result.quantum_families
        }
        
        news_result = quantum_news.analyze_quantum_news(test_articles, subliminal_guidance, top_k=2)
        
        print(f"‚úÖ An√°lisis cu√°ntico de noticias completado")
        print(f"   Art√≠culos seleccionados: {len(news_result.quantum_selected_articles)}")
        print(f"   Scores de ranking: {[f'{score:.3f}' for score in news_result.quantum_ranking_scores]}")
        print(f"   Scores de relevancia: {[f'{score:.3f}' for score in news_result.quantum_relevance_scores]}")
        print(f"   Coherencia sem√°ntica: {[f'{score:.3f}' for score in news_result.quantum_semantic_coherence]}")
        print(f"   An√°lisis de interferencia: {news_result.quantum_interference_analysis}")
        print()
        
        # Test 5: Motor Cu√°ntico Fundamental
        print("5Ô∏è‚É£ MOTOR CU√ÅNTICO FUNDAMENTAL")
        print("-" * 40)
        
        # Test de superposici√≥n cu√°ntica
        numbers = [6, 9, 8]
        quantum_numbers = quantum_engine.create_quantum_superposition(numbers)
        
        print(f"‚úÖ Superposici√≥n cu√°ntica creada")
        print(f"   N√∫meros cu√°nticos: {len(quantum_numbers)}")
        for i, qnum in enumerate(quantum_numbers):
            print(f"     {i+1}. Valor: {qnum.value}, Amplitud: {qnum.amplitude:.3f}, Fase: {qnum.phase:.3f}")
        
        # Test de entrelazamiento cu√°ntico
        entangled_numbers = quantum_engine.create_quantum_entanglement(quantum_numbers)
        
        print(f"‚úÖ Entrelazamiento cu√°ntico aplicado")
        print(f"   N√∫meros entrelazados: {len(entangled_numbers)}")
        for i, qnum in enumerate(entangled_numbers):
            print(f"     {i+1}. Valor: {qnum.value}, Partners: {qnum.entanglement_partners}")
        
        # Test de interferencia cu√°ntica
        interfered_numbers = quantum_engine.apply_quantum_interference(entangled_numbers)
        
        print(f"‚úÖ Interferencia cu√°ntica aplicada")
        print(f"   N√∫meros interferidos: {len(interfered_numbers)}")
        for i, qnum in enumerate(interfered_numbers):
            print(f"     {i+1}. Valor: {qnum.value}, Amplitud: {qnum.amplitude:.3f}")
        
        # Test de medici√≥n cu√°ntica
        measured_numbers = quantum_engine.quantum_measurement(interfered_numbers)
        
        print(f"‚úÖ Medici√≥n cu√°ntica realizada")
        print(f"   N√∫meros medidos: {measured_numbers}")
        print()
        
        # Resumen final
        print("üéØ RESUMEN FINAL - PROTOCOLO CU√ÅNTICO FLORIDA QUINIELA")
        print("=" * 60)
        print("‚úÖ An√°lisis cu√°ntico subliminal completado")
        print("‚úÖ Generaci√≥n cu√°ntica de candado completada")
        print("‚úÖ Verificaci√≥n cu√°ntica de contenido completada")
        print("‚úÖ An√°lisis cu√°ntico de noticias completado")
        print("‚úÖ Motor cu√°ntico fundamental funcionando")
        print()
        print("üöÄ EL PROTOCOLO CU√ÅNTICO FLORIDA QUINIELA EST√Å COMPLETAMENTE FUNCIONAL")
        print("üìä Todos los efectos cu√°nticos implementados y operativos")
        print("üéØ Listo para an√°lisis de sorteos de Florida Quiniela Pick 3")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en el protocolo cu√°ntico: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_florida_quantum_protocol()
    if success:
        print("\nüéâ PRUEBA EXITOSA - PROTOCOLO CU√ÅNTICO FUNCIONANDO")
    else:
        print("\nüí• PRUEBA FALLIDA - REVISAR ERRORES")





