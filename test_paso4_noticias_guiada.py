# ============================================
# üìå TEST: PASO 4 - RECOPILACI√ìN DE NOTICIAS GUIADA
# Prueba del cuarto paso del Protocolo Universal
# Utiliza el submensaje gu√≠a del Paso 3 V2 para buscar noticias
# ============================================

import sys
import os
from datetime import datetime

# A√±adir el directorio de la app al path
sys.path.append(os.path.join(os.path.dirname(__file__), 'modules'))

def test_paso4_noticias_guiada():
    print("üöÄ PRUEBA: PASO 4 - RECOPILACI√ìN DE NOTICIAS GUIADA")
    print("=" * 80)
    print(f"Fecha actual: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    try:
        # Importar el protocolo universal
        from universal_protocol_official import UniversalProtocolOfficial
        
        print("‚úÖ Protocolo Universal importado correctamente")
        
        # Crear instancia del protocolo
        protocol = UniversalProtocolOfficial()
        
        print("‚úÖ Instancia del protocolo creada")
        print()
        
        # Configuraci√≥n para Florida Quiniela Pick 3 con submensaje gu√≠a
        print("üìä CONFIGURACI√ìN DEL PASO 4:")
        print("-" * 40)
        
        # Submensaje gu√≠a del Paso 3 V2
        submensaje_guia = {
            "topics": ['veredicto', 'decisi√≥n', 'propiedad', 'refugio', 'hogar', 'cirug√≠a'],
            "keywords": ['decisi√≥n', 'contenedor', 'umbral', 'portal', 'veredicto', 'refugio'],
            "families": ['corte', 'casa']
        }
        
        # Configuraci√≥n del paso 4
        noticias_config = {
            "lottery_type": "florida_quiniela",
            "game": "Florida_Quiniela",
            "mode": "FLORIDA_QUINIELA",
            "news_query": "Florida community housing support demonstration september 2025",
            "submessage_guide": submensaje_guia,
            "draw_date": "2025-09-07",
            "draw_numbers": [4, 2, 7],
            "subliminal_topics": submensaje_guia["topics"],
            "subliminal_keywords": submensaje_guia["keywords"],
            "subliminal_families": submensaje_guia["families"]
        }
        
        print(f"Juego: {noticias_config['game']}")
        print(f"Modo: {noticias_config['mode']}")
        print(f"Consulta noticias: {noticias_config['news_query']}")
        print(f"T√≥picos gu√≠a: {noticias_config['subliminal_topics']}")
        print(f"Keywords gu√≠a: {noticias_config['subliminal_keywords']}")
        print(f"Familias gu√≠a: {noticias_config['subliminal_families']}")
        print()
        
        # Ejecutar Paso 4: Recopilaci√≥n de Noticias Guiada
        print("üîÑ EJECUTANDO PASO 4: RECOPILACI√ìN DE NOTICIAS GUIADA")
        print("-" * 60)
        
        resultado_paso4 = protocol._step_4_news_collection(
            submessage_guide=str(submensaje_guia),
            lottery_config=noticias_config
        )
        
        print(f"‚úÖ Paso 4 ejecutado")
        print(f"   Estado: {resultado_paso4['status']}")
        print(f"   Nombre: {resultado_paso4['name']}")
        print()
        
        # Mostrar informaci√≥n detallada del paso 4
        if resultado_paso4['status'] == 'completed':
            print("üìä INFORMACI√ìN DETALLADA DEL PASO 4:")
            print("=" * 60)
            
            detalles = resultado_paso4['details']
            
            # 4.1 Procesamiento del submensaje gu√≠a
            print("üéØ 4.1 PROCESAMIENTO DEL SUBMENSAJE GU√çA:")
            print("-" * 40)
            submessage_processing = detalles['submessage_processing']
            print(f"   ‚úÖ Procesado: {submessage_processing.get('processed', False)}")
            print(f"   ‚úÖ T√≥picos procesados: {submessage_processing.get('processed_topics', [])}")
            print(f"   ‚úÖ Keywords procesadas: {submessage_processing.get('processed_keywords', [])}")
            if 'error' in submessage_processing:
                print(f"   ‚ö†Ô∏è  Error: {submessage_processing['error']}")
            print()
            
            # 4.2 Generaci√≥n del modulador de palabras
            print("üîß 4.2 GENERACI√ìN DEL MODULADOR DE PALABRAS:")
            print("-" * 40)
            word_modulator = detalles['word_modulator']
            print(f"   ‚úÖ Generado: {word_modulator.get('generated', False)}")
            print(f"   ‚úÖ Modulador: {word_modulator.get('modulator', {})}")
            if 'error' in word_modulator:
                print(f"   ‚ö†Ô∏è  Error: {word_modulator['error']}")
            print()
            
            # 4.3 Recopilaci√≥n de noticias principales
            print("üì∞ 4.3 RECOPILACI√ìN DE NOTICIAS PRINCIPALES:")
            print("-" * 40)
            main_news = detalles['main_news']
            print(f"   ‚úÖ Recopiladas: {main_news.get('collected', False)}")
            print(f"   ‚úÖ Cantidad: {main_news.get('count', 0)}")
            print(f"   ‚úÖ URLs: {main_news.get('urls', [])}")
            if 'error' in main_news:
                print(f"   ‚ö†Ô∏è  Error: {main_news['error']}")
            print()
            
            # 4.4 B√∫squeda de noticias emocionales
            print("üí≠ 4.4 B√öSQUEDA DE NOTICIAS EMOCIONALES:")
            print("-" * 40)
            emotional_news = detalles['emotional_news']
            print(f"   ‚úÖ Buscadas: {emotional_news.get('searched', False)}")
            print(f"   ‚úÖ Cantidad: {emotional_news.get('count', 0)}")
            print(f"   ‚úÖ URLs: {emotional_news.get('urls', [])}")
            if 'error' in emotional_news:
                print(f"   ‚ö†Ô∏è  Error: {emotional_news['error']}")
            print()
            
            # 4.5 Filtrado de noticias
            print("üîç 4.5 FILTRADO DE NOTICIAS:")
            print("-" * 40)
            news_filtering = detalles['news_filtering']
            print(f"   ‚úÖ Filtradas: {news_filtering.get('filtered', False)}")
            print(f"   ‚úÖ Cantidad final: {news_filtering.get('final_count', 0)}")
            print(f"   ‚úÖ URLs finales: {news_filtering.get('final_urls', [])}")
            if 'error' in news_filtering:
                print(f"   ‚ö†Ô∏è  Error: {news_filtering['error']}")
            print()
            
            # 4.6 Validaci√≥n del auditor
            print("üîç 4.6 VALIDACI√ìN DEL AUDITOR:")
            print("-" * 40)
            auditor_validation = detalles['auditor_validation']
            print(f"   ‚úÖ Validaci√≥n exitosa: {auditor_validation.get('validation_successful', False)}")
            print(f"   ‚úÖ Confianza: {auditor_validation.get('confidence', 'N/A')}")
            if 'error' in auditor_validation:
                print(f"   ‚ö†Ô∏è  Error: {auditor_validation['error']}")
            print()
            
            # Timestamp
            print(f"‚è∞ Timestamp: {detalles.get('timestamp', 'N/A')}")
            print()
            
            # Resumen final
            print("üéØ RESUMEN FINAL DEL PASO 4:")
            print("-" * 40)
            print("‚úÖ Submensaje gu√≠a procesado")
            print("‚úÖ Modulador de palabras generado")
            print("‚úÖ Noticias principales recopiladas")
            print("‚úÖ Noticias emocionales buscadas")
            print("‚úÖ Noticias filtradas correctamente")
            print("‚úÖ Validaci√≥n del auditor completada")
            print()
            print("üöÄ PASO 4 COMPLETADO EXITOSAMENTE")
            print("üìä Recopilaci√≥n de noticias guiada completada")
            
        else:
            print(f"‚ùå Error en Paso 4: {resultado_paso4.get('error', 'Error desconocido')}")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en la prueba del Paso 4: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_paso4_noticias_guiada()
    if success:
        print("\nüéâ PRUEBA EXITOSA - PASO 4 FUNCIONANDO CORRECTAMENTE")
    else:
        print("\nüí• PRUEBA FALLIDA - REVISAR ERRORES")
