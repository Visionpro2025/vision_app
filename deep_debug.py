#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
DIAGN√ìSTICO ULTRA PROFUNDO - VISION PREMIUM
Para identificar EXACTAMENTE qu√© est√° bloqueando la aplicaci√≥n
"""

import sys
import os
import time
import traceback
from pathlib import Path

def print_section(title):
    """Imprime una secci√≥n del diagn√≥stico."""
    print(f"\n{'='*60}")
    print(f"üîç {title}")
    print(f"{'='*60}")

def check_system_info():
    """Verifica informaci√≥n del sistema."""
    print_section("INFORMACI√ìN DEL SISTEMA")
    
    print(f"üìÅ Directorio actual: {Path.cwd()}")
    print(f"üêç Python ejecutable: {sys.executable}")
    print(f"üì¶ Python version: {sys.version}")
    print(f"üñ•Ô∏è  Sistema operativo: {os.name}")
    print(f"üìÇ Archivos en directorio:")
    
    for file in Path.cwd().iterdir():
        if file.is_file():
            print(f"   üìÑ {file.name}")
        elif file.is_dir():
            print(f"   üìÅ {file.name}")

def check_imports_step_by_step():
    """Verifica importaciones paso a paso."""
    print_section("VERIFICACI√ìN DE IMPORTACIONES PASO A PASO")
    
    # 1. Verificar m√≥dulos b√°sicos
    basic_modules = ['os', 'sys', 'pathlib', 'time', 'traceback']
    for module in basic_modules:
        try:
            __import__(module)
            print(f"‚úÖ {module}: OK")
        except Exception as e:
            print(f"‚ùå {module}: ERROR - {e}")
    
    # 2. Verificar Streamlit
    try:
        print("\nüåê Probando Streamlit...")
        import streamlit as st
        print(f"   ‚úÖ Streamlit importado: {st.__version__}")
        
        # Probar funciones b√°sicas
        print("   üîß Probando funciones b√°sicas...")
        st.set_page_config(page_title="TEST", layout="wide")
        print("   ‚úÖ set_page_config: OK")
        
        st.title("Test")
        print("   ‚úÖ title: OK")
        
        st.write("Test")
        print("   ‚úÖ write: OK")
        
    except Exception as e:
        print(f"   ‚ùå Error en Streamlit: {e}")
        traceback.print_exc()
        return False
    
    return True

def check_config_modules():
    """Verifica m√≥dulos de configuraci√≥n."""
    print_section("VERIFICACI√ìN DE M√ìDULOS DE CONFIGURACI√ìN")
    
    config_modules = [
        ('config.theme_config', 'get_theme'),
        ('config.performance_optimization', 'PerformanceOptimizer')
    ]
    
    for module_path, function_name in config_modules:
        try:
            print(f"üîß Probando {module_path}...")
            module = __import__(module_path, fromlist=[function_name])
            function = getattr(module, function_name)
            print(f"   ‚úÖ {module_path}.{function_name}: OK")
        except Exception as e:
            print(f"   ‚ùå {module_path}.{function_name}: ERROR - {e}")
            traceback.print_exc()

def check_file_permissions():
    """Verifica permisos de archivos."""
    print_section("VERIFICACI√ìN DE PERMISOS DE ARCHIVOS")
    
    critical_files = ['app.py', 'app_working.py', 'app_ultra_simple.py']
    
    for file_name in critical_files:
        file_path = Path(file_name)
        if file_path.exists():
            try:
                # Intentar leer el archivo
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read(100)  # Leer solo los primeros 100 caracteres
                print(f"‚úÖ {file_name}: Lectura OK")
                
                # Verificar si es ejecutable
                if os.access(file_path, os.R_OK):
                    print(f"   üìñ Permiso de lectura: OK")
                else:
                    print(f"   ‚ùå Permiso de lectura: DENEGADO")
                    
            except Exception as e:
                print(f"‚ùå {file_name}: ERROR - {e}")
        else:
            print(f"‚ùå {file_name}: NO EXISTE")

def check_streamlit_installation():
    """Verifica la instalaci√≥n de Streamlit."""
    print_section("VERIFICACI√ìN DE INSTALACI√ìN DE STREAMLIT")
    
    try:
        import streamlit as st
        print(f"‚úÖ Streamlit instalado: {st.__version__}")
        
        # Verificar ubicaci√≥n
        streamlit_path = Path(st.__file__).parent
        print(f"üìÅ Ubicaci√≥n: {streamlit_path}")
        
        # Verificar si est√° en el entorno virtual
        venv_path = Path("venv/Scripts")
        if venv_path.exists():
            print(f"üêç Entorno virtual encontrado: {venv_path}")
            
            # Verificar streamlit.exe en venv
            streamlit_exe = venv_path / "streamlit.exe"
            if streamlit_exe.exists():
                print(f"‚úÖ streamlit.exe en venv: OK")
            else:
                print(f"‚ùå streamlit.exe en venv: NO ENCONTRADO")
        else:
            print(f"‚ùå Entorno virtual no encontrado")
            
    except Exception as e:
        print(f"‚ùå Error verificando Streamlit: {e}")
        traceback.print_exc()

def test_minimal_streamlit():
    """Prueba una aplicaci√≥n Streamlit m√≠nima."""
    print_section("PRUEBA DE APLICACI√ìN STREAMLIT M√çNIMA")
    
    try:
        import streamlit as st
        
        # Crear una aplicaci√≥n m√≠nima
        st.set_page_config(page_title="MINI TEST", layout="wide")
        st.title("üöÄ TEST M√çNIMO")
        st.write("Si ves esto, Streamlit funciona")
        
        # Crear un bot√≥n
        if st.button("Probar Bot√≥n"):
            st.success("¬°Bot√≥n funcionando!")
        
        print("‚úÖ Aplicaci√≥n m√≠nima creada exitosamente")
        return True
        
    except Exception as e:
        print(f"‚ùå Error creando aplicaci√≥n m√≠nima: {e}")
        traceback.print_exc()
        return False

def check_network_and_ports():
    """Verifica configuraci√≥n de red y puertos."""
    print_section("VERIFICACI√ìN DE RED Y PUERTOS")
    
    import socket
    
    # Verificar puertos comunes
    ports_to_check = [8501, 8502, 8503, 8504]
    
    for port in ports_to_check:
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(1)
            result = sock.connect_ex(('localhost', port))
            sock.close()
            
            if result == 0:
                print(f"‚ùå Puerto {port}: OCUPADO")
            else:
                print(f"‚úÖ Puerto {port}: DISPONIBLE")
                
        except Exception as e:
            print(f"‚ùå Error verificando puerto {port}: {e}")

def main():
    """Funci√≥n principal de diagn√≥stico profundo."""
    print("üöÄ INICIANDO DIAGN√ìSTICO ULTRA PROFUNDO DE VISION PREMIUM")
    print("=" * 80)
    
    start_time = time.time()
    
    try:
        # Ejecutar todas las verificaciones
        check_system_info()
        check_imports_step_by_step()
        check_config_modules()
        check_file_permissions()
        check_streamlit_installation()
        test_minimal_streamlit()
        check_network_and_ports()
        
        # Resumen final
        print_section("RESUMEN DEL DIAGN√ìSTICO")
        elapsed_time = time.time() - start_time
        print(f"‚è±Ô∏è  Tiempo total: {elapsed_time:.2f} segundos")
        print("‚úÖ Diagn√≥stico completado")
        
        print("\nüéØ RECOMENDACIONES:")
        print("1. Si todas las verificaciones pasaron, el problema est√° en la ejecuci√≥n")
        print("2. Si hay errores de importaci√≥n, reinstala las dependencias")
        print("3. Si hay problemas de permisos, ejecuta como administrador")
        print("4. Si hay conflictos de puertos, usa un puerto diferente")
        
    except Exception as e:
        print(f"üí• ERROR CR√çTICO EN EL DIAGN√ìSTICO: {e}")
        traceback.print_exc()
    
    print("\n" + "=" * 80)
    print("üîç DIAGN√ìSTICO COMPLETADO")

if __name__ == "__main__":
    main()








