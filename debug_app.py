#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
SCRIPT DE DIAGN√ìSTICO - VISION PREMIUM
Para identificar exactamente d√≥nde falla la aplicaci√≥n
"""

import sys
import traceback
from pathlib import Path

def test_imports():
    """Prueba todas las importaciones paso a paso."""
    print("üîç Probando importaciones...")
    
    try:
        print("1. Importando streamlit...")
        import streamlit as st
        print(f"   ‚úÖ Streamlit {st.__version__} importado")
    except Exception as e:
        print(f"   ‚ùå Error en streamlit: {e}")
        return False
    
    try:
        print("2. Importando pathlib...")
        from pathlib import Path
        print("   ‚úÖ Pathlib importado")
    except Exception as e:
        print(f"   ‚ùå Error en pathlib: {e}")
        return False
    
    try:
        print("3. Importando sys...")
        import sys
        print("   ‚úÖ Sys importado")
    except Exception as e:
        print(f"   ‚ùå Error en sys: {e}")
        return False
    
    try:
        print("4. Importando os...")
        import os
        print("   ‚úÖ Os importado")
    except Exception as e:
        print(f"   ‚ùå Error en os: {e}")
        return False
    
    return True

def test_config_imports():
    """Prueba las importaciones de configuraci√≥n."""
    print("\nüîß Probando importaciones de configuraci√≥n...")
    
    try:
        print("1. Importando theme_config...")
        from config.theme_config import get_theme, apply_theme_config
        print("   ‚úÖ Theme config importado")
    except Exception as e:
        print(f"   ‚ùå Error en theme_config: {e}")
        return False
    
    try:
        print("2. Importando performance_optimization...")
        from config.performance_optimization import PerformanceOptimizer, optimized_metric, CacheManager
        print("   ‚úÖ Performance optimization importado")
    except Exception as e:
        print(f"   ‚ùå Error en performance_optimization: {e}")
        return False
    
    return True

def test_streamlit_config():
    """Prueba la configuraci√≥n de Streamlit."""
    print("\nüåê Probando configuraci√≥n de Streamlit...")
    
    try:
        import streamlit as st
        
        print("1. Probando set_page_config...")
        st.set_page_config(
            page_title="TEST",
            page_icon="",
            layout="wide",
            initial_sidebar_state="expanded"
        )
        print("   ‚úÖ set_page_config funcion√≥")
        
        print("2. Probando t√≠tulo...")
        st.title("Test")
        print("   ‚úÖ T√≠tulo funcion√≥")
        
        print("3. Probando sidebar...")
        with st.sidebar:
            st.write("Test sidebar")
        print("   ‚úÖ Sidebar funcion√≥")
        
        print("4. Probando m√©tricas...")
        st.metric("Test", "Value")
        print("   ‚úÖ M√©tricas funcionaron")
        
    except Exception as e:
        print(f"   ‚ùå Error en Streamlit: {e}")
        traceback.print_exc()
        return False
    
    return True

def test_performance_functions():
    """Prueba las funciones de rendimiento."""
    print("\n‚ö° Probando funciones de rendimiento...")
    
    try:
        from config.performance_optimization import monitor_performance, get_optimization_recommendations
        
        print("1. Probando monitor_performance...")
        metrics = monitor_performance()
        print(f"   ‚úÖ M√©tricas obtenidas: {metrics}")
        
        print("2. Probando get_optimization_recommendations...")
        recommendations = get_optimization_recommendations()
        print(f"   ‚úÖ Recomendaciones obtenidas: {recommendations}")
        
    except Exception as e:
        print(f"   ‚ùå Error en funciones de rendimiento: {e}")
        traceback.print_exc()
        return False
    
    return True

def main():
    """Funci√≥n principal de diagn√≥stico."""
    print("üöÄ INICIANDO DIAGN√ìSTICO COMPLETO DE VISION PREMIUM")
    print("=" * 60)
    
    # Verificar directorio
    if not Path("app.py").exists():
        print("‚ùå Error: No est√°s en el directorio correcto")
        print("   Aseg√∫rate de estar en la ra√≠z del proyecto vision_app")
        return False
    
    print(f"üìÅ Directorio actual: {Path.cwd()}")
    print(f"üìÑ Archivo app.py encontrado: {Path('app.py').exists()}")
    
    # Pruebas paso a paso
    tests = [
        ("Importaciones b√°sicas", test_imports),
        ("Importaciones de configuraci√≥n", test_config_imports),
        ("Configuraci√≥n de Streamlit", test_streamlit_config),
        ("Funciones de rendimiento", test_performance_functions)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\n{'='*20} {test_name} {'='*20}")
        try:
            result = test_func()
            results.append((test_name, result))
            if result:
                print(f"‚úÖ {test_name}: EXITOSO")
            else:
                print(f"‚ùå {test_name}: FALL√ì")
        except Exception as e:
            print(f"üí• {test_name}: ERROR CR√çTICO - {e}")
            traceback.print_exc()
            results.append((test_name, False))
    
    # Resumen de resultados
    print("\n" + "=" * 60)
    print("üìä RESUMEN DE DIAGN√ìSTICO")
    print("=" * 60)
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ EXITOSO" if result else "‚ùå FALL√ì"
        print(f"{test_name}: {status}")
    
    print(f"\nüéØ Resultado general: {passed}/{total} pruebas exitosas")
    
    if passed == total:
        print("üéâ ¬°Todas las pruebas pasaron! La aplicaci√≥n deber√≠a funcionar.")
        print("üí° Intenta ejecutar: streamlit run app.py")
    else:
        print("‚ö†Ô∏è  Algunas pruebas fallaron. Revisa los errores arriba.")
        print("üîß La aplicaci√≥n puede no funcionar correctamente.")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)








